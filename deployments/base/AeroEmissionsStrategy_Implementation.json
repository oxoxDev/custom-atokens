{
  "address": "0xCD56B7e780C953E66832b8b4378bC145a1aAB511",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "aero",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emissionManager",
      "outputs": [
        {
          "internalType": "contract IEmissionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "emissionsNotified",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "emissionsReceived",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIncentivesController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardsAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incentiveController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_aero",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_emissionManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_incentiveController",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastNotified",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        }
      ],
      "name": "notifyEmissionManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "performTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "receiveAeroEmission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "what",
          "type": "bool"
        }
      ],
      "name": "whitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcf9e73797fbf0fcf2cffe403a8a9c0d2400e17bfadc9c953f60378004433d4cf",
  "receipt": {
    "to": null,
    "from": "0xb76F765A785eCa438e1d95f594490088aFAF9acc",
    "contractAddress": "0xCD56B7e780C953E66832b8b4378bC145a1aAB511",
    "transactionIndex": 86,
    "gasUsed": "1668539",
    "logsBloom": "0x
    "blockHash": "0xa7d20400d9a9f7d81dab0bf9a5a6eed5e08e6aada891741ca31a569b9180971b",
    "transactionHash": "0xcf9e73797fbf0fcf2cffe403a8a9c0d2400e17bfadc9c953f60378004433d4cf",
    "logs": [
      {
        "transactionIndex": 86,
        "blockNumber": 20409509,
        "transactionHash": "0xcf9e73797fbf0fcf2cffe403a8a9c0d2400e17bfadc9c953f60378004433d4cf",
        "address": "0xCD56B7e780C953E66832b8b4378bC145a1aAB511",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b76f765a785eca438e1d95f594490088afaf9acc"
        ],
        "data": "0x",
        "logIndex": 226,
        "blockHash": "0xa7d20400d9a9f7d81dab0bf9a5a6eed5e08e6aada891741ca31a569b9180971b"
      }
    ],
    "blockNumber": 20409509,
    "cumulativeGasUsed": "21093354",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d777b3037161a9d914dcb09d22e1b164",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"aero\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionManager\",\"outputs\":[{\"internalType\":\"contract IEmissionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"emissionsNotified\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"emissionsReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIncentivesController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentiveController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aero\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_emissionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_incentiveController\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastNotified\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"}],\"name\":\"notifyEmissionManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"performTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"receiveAeroEmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"what\",\"type\":\"bool\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"NOTE That ATokenAerodrome should not be made borrowable\",\"kind\":\"dev\",\"methods\":{\"emergencyWithdrawal(address,address,uint256)\":{\"details\":\"Perform an emergency token withdrawal only callable by the Rewards admin\",\"params\":{\"amount\":\"Amount of the withdrawal\",\"to\":\"Address of the recipient of the withdrawal\",\"token\":\"Address of the token to withdraw funds from this contract\"}},\"getIncentivesController()\":{\"returns\":{\"_0\":\"Returns the address of the Incentives Controller\"}},\"getRewardsAdmin()\":{\"returns\":{\"_0\":\"Returns the address of the Rewards admin\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"performTransfer(address,address,uint256)\":{\"details\":\"Perform custom transfer logic via delegate call from source contract to a TransferStrategy implementation\",\"params\":{\"amount\":\"Amount to transfer to the \\\"to\\\" address parameter\",\"reward\":\"Address of the reward token\",\"to\":\"Account to transfer rewards\"},\"returns\":{\"_0\":\"Returns true bool if transfer logic succeeds\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/aerodrome/AeroEmissionsStrategy.sol\":\"AeroEmissionsStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@zerolendxyz/core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf57d62241e553696a1324d225663ba2e1a51db0a51ca236d0c1b009d89b6284c\",\"license\":\"AGPL-3.0\"},\"@zerolendxyz/core-v3/contracts/dependencies/openzeppelin/upgradeability/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(\\n      initializing || isConstructor() || !initialized,\\n      'Contract instance has already been initialized'\\n    );\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    uint256 cs;\\n    //solium-disable-next-line\\n    assembly {\\n      cs := extcodesize(address())\\n    }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x22e724f8aff2fc350408001818dd9cff7afe2d1ebe6bbe2de7bd9e0f5f7f6797\",\"license\":\"AGPL-3.0\"},\"@zerolendxyz/periphery-v3/contracts/misc/interfaces/IEACAggregatorProxy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.12;\\n\\ninterface IEACAggregatorProxy {\\n  function decimals() external view returns (uint8);\\n\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\\n  event NewRound(uint256 indexed roundId, address indexed startedBy);\\n}\\n\",\"keccak256\":\"0x62f578507bdbf85455594030e5143e193920ffa43fd87898ba3b61ab1f6e3d0f\",\"license\":\"AGPL-3.0\"},\"@zerolendxyz/periphery-v3/contracts/rewards/interfaces/IEmissionManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport {IEACAggregatorProxy} from '../../misc/interfaces/IEACAggregatorProxy.sol';\\nimport {RewardsDataTypes} from '../libraries/RewardsDataTypes.sol';\\nimport {ITransferStrategyBase} from './ITransferStrategyBase.sol';\\nimport {IRewardsController} from './IRewardsController.sol';\\n\\n/**\\n * @title IEmissionManager\\n * @author Aave\\n * @notice Defines the basic interface for the Emission Manager\\n */\\ninterface IEmissionManager {\\n  /**\\n   * @dev Emitted when the admin of a reward emission is updated.\\n   * @param reward The address of the rewarding token\\n   * @param oldAdmin The address of the old emission admin\\n   * @param newAdmin The address of the new emission admin\\n   */\\n  event EmissionAdminUpdated(\\n    address indexed reward,\\n    address indexed oldAdmin,\\n    address indexed newAdmin\\n  );\\n\\n  /**\\n   * @dev Configure assets to incentivize with an emission of rewards per second until the end of distribution.\\n   * @dev Only callable by the emission admin of the given rewards\\n   * @param config The assets configuration input, the list of structs contains the following fields:\\n   *   uint104 emissionPerSecond: The emission per second following rewards unit decimals.\\n   *   uint256 totalSupply: The total supply of the asset to incentivize\\n   *   uint40 distributionEnd: The end of the distribution of the incentives for an asset\\n   *   address asset: The asset address to incentivize\\n   *   address reward: The reward token address\\n   *   ITransferStrategy transferStrategy: The TransferStrategy address with the install hook and claim logic.\\n   *   IEACAggregatorProxy rewardOracle: The Price Oracle of a reward to visualize the incentives at the UI Frontend.\\n   *                                     Must follow Chainlink Aggregator IEACAggregatorProxy interface to be compatible.\\n   */\\n  function configureAssets(RewardsDataTypes.RewardsConfigInput[] memory config) external;\\n\\n  /**\\n   * @dev Sets a TransferStrategy logic contract that determines the logic of the rewards transfer\\n   * @dev Only callable by the emission admin of the given reward\\n   * @param reward The address of the reward token\\n   * @param transferStrategy The address of the TransferStrategy logic contract\\n   */\\n  function setTransferStrategy(address reward, ITransferStrategyBase transferStrategy) external;\\n\\n  /**\\n   * @dev Sets an Aave Oracle contract to enforce rewards with a source of value.\\n   * @dev Only callable by the emission admin of the given reward\\n   * @notice At the moment of reward configuration, the Incentives Controller performs\\n   * a check to see if the reward asset oracle is compatible with IEACAggregator proxy.\\n   * This check is enforced for integrators to be able to show incentives at\\n   * the current Aave UI without the need to setup an external price registry\\n   * @param reward The address of the reward to set the price aggregator\\n   * @param rewardOracle The address of price aggregator that follows IEACAggregatorProxy interface\\n   */\\n  function setRewardOracle(address reward, IEACAggregatorProxy rewardOracle) external;\\n\\n  /**\\n   * @dev Sets the end date for the distribution\\n   * @dev Only callable by the emission admin of the given reward\\n   * @param asset The asset to incentivize\\n   * @param reward The reward token that incentives the asset\\n   * @param newDistributionEnd The end date of the incentivization, in unix time format\\n   **/\\n  function setDistributionEnd(address asset, address reward, uint32 newDistributionEnd) external;\\n\\n  /**\\n   * @dev Sets the emission per second of a set of reward distributions\\n   * @param asset The asset is being incentivized\\n   * @param rewards List of reward addresses are being distributed\\n   * @param newEmissionsPerSecond List of new reward emissions per second\\n   */\\n  function setEmissionPerSecond(\\n    address asset,\\n    address[] calldata rewards,\\n    uint88[] calldata newEmissionsPerSecond\\n  ) external;\\n\\n  /**\\n   * @dev Whitelists an address to claim the rewards on behalf of another address\\n   * @dev Only callable by the owner of the EmissionManager\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  function setClaimer(address user, address claimer) external;\\n\\n  /**\\n   * @dev Updates the admin of the reward emission\\n   * @dev Only callable by the owner of the EmissionManager\\n   * @param reward The address of the reward token\\n   * @param admin The address of the new admin of the emission\\n   */\\n  function setEmissionAdmin(address reward, address admin) external;\\n\\n  /**\\n   * @dev Updates the address of the rewards controller\\n   * @dev Only callable by the owner of the EmissionManager\\n   * @param controller the address of the RewardsController contract\\n   */\\n  function setRewardsController(address controller) external;\\n\\n  /**\\n   * @dev Returns the rewards controller address\\n   * @return The address of the RewardsController contract\\n   */\\n  function getRewardsController() external view returns (IRewardsController);\\n\\n  /**\\n   * @dev Returns the admin of the given reward emission\\n   * @param reward The address of the reward token\\n   * @return The address of the emission admin\\n   */\\n  function getEmissionAdmin(address reward) external view returns (address);\\n}\\n\",\"keccak256\":\"0xcc549ebc81f86d0066bdb97233685a25baa5d565aa466c2f04915c709da0511d\",\"license\":\"AGPL-3.0\"},\"@zerolendxyz/periphery-v3/contracts/rewards/interfaces/IRewardsController.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport {IRewardsDistributor} from './IRewardsDistributor.sol';\\nimport {ITransferStrategyBase} from './ITransferStrategyBase.sol';\\nimport {IEACAggregatorProxy} from '../../misc/interfaces/IEACAggregatorProxy.sol';\\nimport {RewardsDataTypes} from '../libraries/RewardsDataTypes.sol';\\n\\n/**\\n * @title IRewardsController\\n * @author Aave\\n * @notice Defines the basic interface for a Rewards Controller.\\n */\\ninterface IRewardsController is IRewardsDistributor {\\n  /**\\n   * @dev Emitted when a new address is whitelisted as claimer of rewards on behalf of a user\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  event ClaimerSet(address indexed user, address indexed claimer);\\n\\n  /**\\n   * @dev Emitted when rewards are claimed\\n   * @param user The address of the user rewards has been claimed on behalf of\\n   * @param reward The address of the token reward is claimed\\n   * @param to The address of the receiver of the rewards\\n   * @param claimer The address of the claimer\\n   * @param amount The amount of rewards claimed\\n   */\\n  event RewardsClaimed(\\n    address indexed user,\\n    address indexed reward,\\n    address indexed to,\\n    address claimer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted when a transfer strategy is installed for the reward distribution\\n   * @param reward The address of the token reward\\n   * @param transferStrategy The address of TransferStrategy contract\\n   */\\n  event TransferStrategyInstalled(address indexed reward, address indexed transferStrategy);\\n\\n  /**\\n   * @dev Emitted when the reward oracle is updated\\n   * @param reward The address of the token reward\\n   * @param rewardOracle The address of oracle\\n   */\\n  event RewardOracleUpdated(address indexed reward, address indexed rewardOracle);\\n\\n  /**\\n   * @dev Whitelists an address to claim the rewards on behalf of another address\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  function setClaimer(address user, address claimer) external;\\n\\n  /**\\n   * @dev Sets a TransferStrategy logic contract that determines the logic of the rewards transfer\\n   * @param reward The address of the reward token\\n   * @param transferStrategy The address of the TransferStrategy logic contract\\n   */\\n  function setTransferStrategy(address reward, ITransferStrategyBase transferStrategy) external;\\n\\n  /**\\n   * @dev Sets an Aave Oracle contract to enforce rewards with a source of value.\\n   * @notice At the moment of reward configuration, the Incentives Controller performs\\n   * a check to see if the reward asset oracle is compatible with IEACAggregator proxy.\\n   * This check is enforced for integrators to be able to show incentives at\\n   * the current Aave UI without the need to setup an external price registry\\n   * @param reward The address of the reward to set the price aggregator\\n   * @param rewardOracle The address of price aggregator that follows IEACAggregatorProxy interface\\n   */\\n  function setRewardOracle(address reward, IEACAggregatorProxy rewardOracle) external;\\n\\n  /**\\n   * @dev Get the price aggregator oracle address\\n   * @param reward The address of the reward\\n   * @return The price oracle of the reward\\n   */\\n  function getRewardOracle(address reward) external view returns (address);\\n\\n  /**\\n   * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n   * @param user The address of the user\\n   * @return The claimer address\\n   */\\n  function getClaimer(address user) external view returns (address);\\n\\n  /**\\n   * @dev Returns the Transfer Strategy implementation contract address being used for a reward address\\n   * @param reward The address of the reward\\n   * @return The address of the TransferStrategy contract\\n   */\\n  function getTransferStrategy(address reward) external view returns (address);\\n\\n  /**\\n   * @dev Configure assets to incentivize with an emission of rewards per second until the end of distribution.\\n   * @param config The assets configuration input, the list of structs contains the following fields:\\n   *   uint104 emissionPerSecond: The emission per second following rewards unit decimals.\\n   *   uint256 totalSupply: The total supply of the asset to incentivize\\n   *   uint40 distributionEnd: The end of the distribution of the incentives for an asset\\n   *   address asset: The asset address to incentivize\\n   *   address reward: The reward token address\\n   *   ITransferStrategy transferStrategy: The TransferStrategy address with the install hook and claim logic.\\n   *   IEACAggregatorProxy rewardOracle: The Price Oracle of a reward to visualize the incentives at the UI Frontend.\\n   *                                     Must follow Chainlink Aggregator IEACAggregatorProxy interface to be compatible.\\n   */\\n  function configureAssets(RewardsDataTypes.RewardsConfigInput[] memory config) external;\\n\\n  /**\\n   * @dev Called by the corresponding asset on transfer hook in order to update the rewards distribution.\\n   * @dev The units of `totalSupply` and `userBalance` should be the same.\\n   * @param user The address of the user whose asset balance has changed\\n   * @param totalSupply The total supply of the asset prior to user balance change\\n   * @param userBalance The previous user balance prior to balance change\\n   **/\\n  function handleAction(address user, uint256 totalSupply, uint256 userBalance) external;\\n\\n  /**\\n   * @dev Claims reward for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\\n   * @param assets List of assets to check eligible distributions before claiming rewards\\n   * @param amount The amount of rewards to claim\\n   * @param to The address that will be receiving the rewards\\n   * @param reward The address of the reward token\\n   * @return The amount of rewards claimed\\n   **/\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to,\\n    address reward\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The\\n   * caller must be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\n   * @param amount The amount of rewards to claim\\n   * @param user The address to check and claim rewards\\n   * @param to The address that will be receiving the rewards\\n   * @param reward The address of the reward token\\n   * @return The amount of rewards claimed\\n   **/\\n  function claimRewardsOnBehalf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address user,\\n    address to,\\n    address reward\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\n   * @param amount The amount of rewards to claim\\n   * @param reward The address of the reward token\\n   * @return The amount of rewards claimed\\n   **/\\n  function claimRewardsToSelf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address reward\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims all rewards for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\n   * @param to The address that will be receiving the rewards\\n   * @return rewardsList List of addresses of the reward tokens\\n   * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardList\\\"\\n   **/\\n  function claimAllRewards(\\n    address[] calldata assets,\\n    address to\\n  ) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n  /**\\n   * @dev Claims all rewards for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The caller must\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\n   * @param user The address to check and claim rewards\\n   * @param to The address that will be receiving the rewards\\n   * @return rewardsList List of addresses of the reward tokens\\n   * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\n   **/\\n  function claimAllRewardsOnBehalf(\\n    address[] calldata assets,\\n    address user,\\n    address to\\n  ) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n  /**\\n   * @dev Claims all reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\n   * @return rewardsList List of addresses of the reward tokens\\n   * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\n   **/\\n  function claimAllRewardsToSelf(\\n    address[] calldata assets\\n  ) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n}\\n\",\"keccak256\":\"0xe81f81649fe977bb8fa9aa2e0143c043f4cf38a76c319fe8f0b18edd43c3d31e\",\"license\":\"AGPL-3.0\"},\"@zerolendxyz/periphery-v3/contracts/rewards/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.12;\\n\\n/**\\n * @title IRewardsDistributor\\n * @author Aave\\n * @notice Defines the basic interface for a Rewards Distributor.\\n */\\ninterface IRewardsDistributor {\\n  /**\\n   * @dev Emitted when the configuration of the rewards of an asset is updated.\\n   * @param asset The address of the incentivized asset\\n   * @param reward The address of the reward token\\n   * @param oldEmission The old emissions per second value of the reward distribution\\n   * @param newEmission The new emissions per second value of the reward distribution\\n   * @param oldDistributionEnd The old end timestamp of the reward distribution\\n   * @param newDistributionEnd The new end timestamp of the reward distribution\\n   * @param assetIndex The index of the asset distribution\\n   */\\n  event AssetConfigUpdated(\\n    address indexed asset,\\n    address indexed reward,\\n    uint256 oldEmission,\\n    uint256 newEmission,\\n    uint256 oldDistributionEnd,\\n    uint256 newDistributionEnd,\\n    uint256 assetIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when rewards of an asset are accrued on behalf of a user.\\n   * @param asset The address of the incentivized asset\\n   * @param reward The address of the reward token\\n   * @param user The address of the user that rewards are accrued on behalf of\\n   * @param assetIndex The index of the asset distribution\\n   * @param userIndex The index of the asset distribution on behalf of the user\\n   * @param rewardsAccrued The amount of rewards accrued\\n   */\\n  event Accrued(\\n    address indexed asset,\\n    address indexed reward,\\n    address indexed user,\\n    uint256 assetIndex,\\n    uint256 userIndex,\\n    uint256 rewardsAccrued\\n  );\\n\\n  /**\\n   * @dev Sets the end date for the distribution\\n   * @param asset The asset to incentivize\\n   * @param reward The reward token that incentives the asset\\n   * @param newDistributionEnd The end date of the incentivization, in unix time format\\n   **/\\n  function setDistributionEnd(address asset, address reward, uint32 newDistributionEnd) external;\\n\\n  /**\\n   * @dev Sets the emission per second of a set of reward distributions\\n   * @param asset The asset is being incentivized\\n   * @param rewards List of reward addresses are being distributed\\n   * @param newEmissionsPerSecond List of new reward emissions per second\\n   */\\n  function setEmissionPerSecond(\\n    address asset,\\n    address[] calldata rewards,\\n    uint88[] calldata newEmissionsPerSecond\\n  ) external;\\n\\n  /**\\n   * @dev Gets the end date for the distribution\\n   * @param asset The incentivized asset\\n   * @param reward The reward token of the incentivized asset\\n   * @return The timestamp with the end of the distribution, in unix time format\\n   **/\\n  function getDistributionEnd(address asset, address reward) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the index of a user on a reward distribution\\n   * @param user Address of the user\\n   * @param asset The incentivized asset\\n   * @param reward The reward token of the incentivized asset\\n   * @return The current user asset index, not including new distributions\\n   **/\\n  function getUserAssetIndex(\\n    address user,\\n    address asset,\\n    address reward\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the configuration of the distribution reward for a certain asset\\n   * @param asset The incentivized asset\\n   * @param reward The reward token of the incentivized asset\\n   * @return The index of the asset distribution\\n   * @return The emission per second of the reward distribution\\n   * @return The timestamp of the last update of the index\\n   * @return The timestamp of the distribution end\\n   **/\\n  function getRewardsData(\\n    address asset,\\n    address reward\\n  ) external view returns (uint256, uint256, uint256, uint256);\\n\\n  /**\\n   * @dev Calculates the next value of an specific distribution index, with validations.\\n   * @param asset The incentivized asset\\n   * @param reward The reward token of the incentivized asset\\n   * @return The old index of the asset distribution\\n   * @return The new index of the asset distribution\\n   **/\\n  function getAssetIndex(address asset, address reward) external view returns (uint256, uint256);\\n\\n  /**\\n   * @dev Returns the list of available reward token addresses of an incentivized asset\\n   * @param asset The incentivized asset\\n   * @return List of rewards addresses of the input asset\\n   **/\\n  function getRewardsByAsset(address asset) external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns the list of available reward addresses\\n   * @return List of rewards supported in this contract\\n   **/\\n  function getRewardsList() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns the accrued rewards balance of a user, not including virtually accrued rewards since last distribution.\\n   * @param user The address of the user\\n   * @param reward The address of the reward token\\n   * @return Unclaimed rewards, not including new distributions\\n   **/\\n  function getUserAccruedRewards(address user, address reward) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns a single rewards balance of a user, including virtually accrued and unrealized claimable rewards.\\n   * @param assets List of incentivized assets to check eligible distributions\\n   * @param user The address of the user\\n   * @param reward The address of the reward token\\n   * @return The rewards amount\\n   **/\\n  function getUserRewards(\\n    address[] calldata assets,\\n    address user,\\n    address reward\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns a list all rewards of a user, including already accrued and unrealized claimable rewards\\n   * @param assets List of incentivized assets to check eligible distributions\\n   * @param user The address of the user\\n   * @return The list of reward addresses\\n   * @return The list of unclaimed amount of rewards\\n   **/\\n  function getAllUserRewards(\\n    address[] calldata assets,\\n    address user\\n  ) external view returns (address[] memory, uint256[] memory);\\n\\n  /**\\n   * @dev Returns the decimals of an asset to calculate the distribution delta\\n   * @param asset The address to retrieve decimals\\n   * @return The decimals of an underlying asset\\n   */\\n  function getAssetDecimals(address asset) external view returns (uint8);\\n\\n  /**\\n   * @dev Returns the address of the emission manager\\n   * @return The address of the EmissionManager\\n   */\\n  function EMISSION_MANAGER() external view returns (address);\\n\\n  /**\\n   * @dev Returns the address of the emission manager.\\n   * Deprecated: This getter is maintained for compatibility purposes. Use the `EMISSION_MANAGER()` function instead.\\n   * @return The address of the EmissionManager\\n   */\\n  function getEmissionManager() external view returns (address);\\n}\\n\",\"keccak256\":\"0x919f4bcf825d260c0d46e5eebbc072ced95240d73529f625376d71904f1bb1d6\",\"license\":\"AGPL-3.0\"},\"@zerolendxyz/periphery-v3/contracts/rewards/interfaces/ITransferStrategyBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.12;\\n\\ninterface ITransferStrategyBase {\\n  event EmergencyWithdrawal(\\n    address indexed caller,\\n    address indexed token,\\n    address indexed to,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Perform custom transfer logic via delegate call from source contract to a TransferStrategy implementation\\n   * @param to Account to transfer rewards\\n   * @param reward Address of the reward token\\n   * @param amount Amount to transfer to the \\\"to\\\" address parameter\\n   * @return Returns true bool if transfer logic succeeds\\n   */\\n  function performTransfer(address to, address reward, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @return Returns the address of the Incentives Controller\\n   */\\n  function getIncentivesController() external view returns (address);\\n\\n  /**\\n   * @return Returns the address of the Rewards admin\\n   */\\n  function getRewardsAdmin() external view returns (address);\\n\\n  /**\\n   * @dev Perform an emergency token withdrawal only callable by the Rewards admin\\n   * @param token Address of the token to withdraw funds from this contract\\n   * @param to Address of the recipient of the withdrawal\\n   * @param amount Amount of the withdrawal\\n   */\\n  function emergencyWithdrawal(address token, address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x52a79ddee5e8bf56aa1dde7f9332cc9ae0dd77273f757a8454a4c32674a39dbd\",\"license\":\"AGPL-3.0\"},\"@zerolendxyz/periphery-v3/contracts/rewards/libraries/RewardsDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport {ITransferStrategyBase} from '../interfaces/ITransferStrategyBase.sol';\\nimport {IEACAggregatorProxy} from '../../misc/interfaces/IEACAggregatorProxy.sol';\\n\\nlibrary RewardsDataTypes {\\n  struct RewardsConfigInput {\\n    uint88 emissionPerSecond;\\n    uint256 totalSupply;\\n    uint32 distributionEnd;\\n    address asset;\\n    address reward;\\n    ITransferStrategyBase transferStrategy;\\n    IEACAggregatorProxy rewardOracle;\\n  }\\n\\n  struct UserAssetBalance {\\n    address asset;\\n    uint256 userBalance;\\n    uint256 totalSupply;\\n  }\\n\\n  struct UserData {\\n    // Liquidity index of the reward distribution for the user\\n    uint104 index;\\n    // Amount of accrued rewards for the user since last user index update\\n    uint128 accrued;\\n  }\\n\\n  struct RewardData {\\n    // Liquidity index of the reward distribution\\n    uint104 index;\\n    // Amount of reward tokens distributed per second\\n    uint88 emissionPerSecond;\\n    // Timestamp of the last reward index update\\n    uint32 lastUpdateTimestamp;\\n    // The end of the distribution of rewards (in seconds)\\n    uint32 distributionEnd;\\n    // Map of user addresses and their rewards data (userAddress => userData)\\n    mapping(address => UserData) usersData;\\n  }\\n\\n  struct AssetData {\\n    // Map of reward token addresses and their data (rewardTokenAddress => rewardData)\\n    mapping(address => RewardData) rewards;\\n    // List of reward token addresses for the asset\\n    mapping(uint128 => address) availableRewards;\\n    // Count of reward tokens for the asset\\n    uint128 availableRewardsCount;\\n    // Number of decimals of the asset\\n    uint8 decimals;\\n  }\\n}\\n\",\"keccak256\":\"0x8752829899036d29c752db49008e463b0fd464e3b05f4191428b9f60b0604d1b\",\"license\":\"AGPL-3.0\"},\"contracts/aerodrome/AeroEmissionsStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport {IEmissionManager, IEACAggregatorProxy, RewardsDataTypes, ITransferStrategyBase} from \\\"@zerolendxyz/periphery-v3/contracts/rewards/interfaces/IEmissionManager.sol\\\";\\nimport {IERC20} from \\\"@zerolendxyz/core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol\\\";\\nimport {Initializable} from \\\"@zerolendxyz/core-v3/contracts/dependencies/openzeppelin/upgradeability/Initializable.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @dev NOTE That ATokenAerodrome should not be made borrowable\\ncontract AeroEmissionsStrategy is\\n    Initializable,\\n    Ownable,\\n    ITransferStrategyBase\\n{\\n    address public incentiveController;\\n    IEmissionManager public emissionManager;\\n    IERC20 public aero;\\n\\n    mapping(address => uint256) public emissionsReceived;\\n    mapping(address => uint256) public emissionsNotified;\\n    mapping(address => uint256) public lastNotified;\\n    mapping(address => bool) public whitelisted;\\n    address public oracle;\\n\\n    modifier onlyIncentivesController() {\\n        require(\\n            incentiveController == msg.sender,\\n            \\\"CALLER_NOT_INCENTIVES_CONTROLLER\\\"\\n        );\\n        _;\\n    }\\n\\n    function initialize(\\n        address _owner,\\n        address _aero,\\n        address _oracle,\\n        address _emissionManager,\\n        address _incentiveController\\n    ) public initializer {\\n        aero = IERC20(_aero);\\n        emissionManager = IEmissionManager(_emissionManager);\\n        incentiveController = _incentiveController;\\n        whitelisted[_owner] = true;\\n        oracle = _oracle;\\n        _transferOwnership(_owner);\\n    }\\n\\n    function receiveAeroEmission(uint256 amount) external {\\n        aero.transferFrom(msg.sender, address(this), amount);\\n        emissionsReceived[msg.sender] += amount;\\n    }\\n\\n    function whitelist(address who, bool what) external onlyOwner {\\n        whitelisted[who] = what;\\n    }\\n\\n    function notifyEmissionManager(address reserve) external {\\n        require(whitelisted[msg.sender], \\\"not whitelisted\\\");\\n\\n        uint256 received = emissionsReceived[reserve];\\n        uint256 notified = emissionsNotified[reserve];\\n        uint256 pending = received - notified;\\n\\n        require(pending > 0, \\\"no emissions to notify\\\");\\n        require(\\n            lastNotified[reserve] - 1 days >= block.timestamp,\\n            \\\"too soon to notify\\\"\\n        );\\n\\n        uint256 emissionPerSecond = pending / 1 days;\\n\\n        RewardsDataTypes.RewardsConfigInput memory data = RewardsDataTypes\\n            .RewardsConfigInput({\\n                emissionPerSecond: uint88(emissionPerSecond),\\n                totalSupply: 0,\\n                distributionEnd: uint32(block.timestamp + 1 days),\\n                asset: reserve,\\n                reward: address(aero),\\n                rewardOracle: IEACAggregatorProxy(oracle),\\n                transferStrategy: ITransferStrategyBase(address(this))\\n            });\\n\\n        RewardsDataTypes.RewardsConfigInput[]\\n            memory config = new RewardsDataTypes.RewardsConfigInput[](1);\\n        config[0] = data;\\n        emissionManager.configureAssets(config);\\n\\n        lastNotified[reserve] = block.timestamp;\\n    }\\n\\n    /// @inheritdoc ITransferStrategyBase\\n    function performTransfer(\\n        address to,\\n        address reward,\\n        uint256 amount\\n    )\\n        external\\n        override(ITransferStrategyBase)\\n        onlyIncentivesController\\n        returns (bool)\\n    {\\n        return IERC20(reward).transfer(to, amount);\\n    }\\n\\n    /// @inheritdoc ITransferStrategyBase\\n    function getIncentivesController()\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return incentiveController;\\n    }\\n\\n    /// @inheritdoc ITransferStrategyBase\\n    function getRewardsAdmin() external view override returns (address) {\\n        return owner();\\n    }\\n\\n    /// @inheritdoc ITransferStrategyBase\\n    function emergencyWithdrawal(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external onlyOwner {\\n        IERC20(token).transfer(to, amount);\\n        emit EmergencyWithdrawal(msg.sender, token, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x811dfea805ef99a26d23b5d4d357833e80945b3322f8636416f42dc0a6a65744\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b610100565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611ccf8061010f6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80637dc0d1d0116100ad578063d8d496ed11610071578063d8d496ed146102e4578063d936547e14610314578063e307c95214610344578063f2fde38b14610362578063f59c37081461037e57610121565b80637dc0d1d0146102525780638885711a146102705780638d8e5da71461028c5780638da5cb5b146102a8578063c6255443146102c657610121565b80635b9fe37f116100f45780635b9fe37f146101c057806362278463146101de578063715018a61461020e57806375d26413146102185780637c3702b11461023657610121565b80631459457a1461012657806316beb9821461014257806326837eda146101725780632f1f138b14610190575b600080fd5b610140600480360381019061013b9190611221565b61039a565b005b61015c600480360381019061015791906112d2565b6105ec565b6040516101699190611340565b60405180910390f35b61017a610705565b60405161018791906113ba565b60405180910390f35b6101aa60048036038101906101a591906113d5565b61072b565b6040516101b79190611411565b60405180910390f35b6101c8610743565b6040516101d5919061143b565b60405180910390f35b6101f860048036038101906101f391906113d5565b610769565b6040516102059190611411565b60405180910390f35b610216610781565b005b610220610795565b60405161022d919061143b565b60405180910390f35b610250600480360381019061024b9190611456565b6107bf565b005b61025a6108bb565b604051610267919061143b565b60405180910390f35b61028a600480360381019061028591906113d5565b6108e1565b005b6102a660048036038101906102a191906112d2565b610d33565b005b6102b0610e3b565b6040516102bd919061143b565b60405180910390f35b6102ce610e65565b6040516102db919061143b565b60405180910390f35b6102fe60048036038101906102f991906113d5565b610e74565b60405161030b9190611411565b60405180910390f35b61032e600480360381019061032991906113d5565b610e8c565b60405161033b9190611340565b60405180910390f35b61034c610eac565b60405161035991906114a4565b60405180910390f35b61037c600480360381019061037791906113d5565b610ed2565b005b610398600480360381019061039391906114eb565b610f56565b005b600060019054906101000a900460ff16806103b957506103b8610fb9565b5b806103cf575060008054906101000a900460ff16155b61040e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610405906115ae565b60405180910390fd5b60008060019054906101000a900460ff16159050801561045e576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b84603660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082603560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081603460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001603a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555083603b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506105c386610fca565b80156105e45760008060016101000a81548160ff0219169083151502179055505b505050505050565b60003373ffffffffffffffffffffffffffffffffffffffff16603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461067e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106759061161a565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85846040518363ffffffff1660e01b81526004016106b992919061163a565b6020604051808303816000875af11580156106d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fc9190611678565b90509392505050565b603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60396020528060005260406000206000915090505481565b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60386020528060005260406000206000915090505481565b610789611090565b6107936000610fca565b565b6000603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161081e939291906116a5565b6020604051808303816000875af115801561083d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108619190611678565b5080603760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108b1919061170b565b9250508190555050565b603b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661096d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610964906117ad565b60405180910390fd5b6000603760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000603860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008183610a0391906117cd565b905060008111610a48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3f9061184d565b60405180910390fd5b4262015180603960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a9791906117cd565b1015610ad8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610acf906118b9565b60405180910390fd5b60006201518082610ae99190611908565b905060006040518060e00160405280836affffffffffffffffffffff168152602001600081526020016201518042610b21919061170b565b63ffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff168152602001603b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525090506000600167ffffffffffffffff811115610bfd57610bfc611939565b5b604051908082528060200260200182016040528015610c3657816020015b610c23611116565b815260200190600190039081610c1b5790505b5090508181600081518110610c4e57610c4d611968565b5b6020026020010181905250603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663955c2ad7826040518263ffffffff1660e01b8152600401610cb49190611b79565b600060405180830381600087803b158015610cce57600080fd5b505af1158015610ce2573d6000803e3d6000fd5b5050505042603960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505050505050565b610d3b611090565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401610d7692919061163a565b6020604051808303816000875af1158015610d95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db99190611678565b508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f7dc4ea712e6400e67a5abca1a983e5c420c386c19936dc120cd860b50b8e257984604051610e2e9190611411565b60405180910390a4505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610e6f610e3b565b905090565b60376020528060005260406000206000915090505481565b603a6020528060005260406000206000915054906101000a900460ff1681565b603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610eda611090565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4190611c0d565b60405180910390fd5b610f5381610fca565b50565b610f5e611090565b80603a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600080303b90506000811491505090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61109861110e565b73ffffffffffffffffffffffffffffffffffffffff166110b6610e3b565b73ffffffffffffffffffffffffffffffffffffffff161461110c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110390611c79565b60405180910390fd5b565b600033905090565b6040518060e0016040528060006affffffffffffffffffffff16815260200160008152602001600063ffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111ee826111c3565b9050919050565b6111fe816111e3565b811461120957600080fd5b50565b60008135905061121b816111f5565b92915050565b600080600080600060a0868803121561123d5761123c6111be565b5b600061124b8882890161120c565b955050602061125c8882890161120c565b945050604061126d8882890161120c565b935050606061127e8882890161120c565b925050608061128f8882890161120c565b9150509295509295909350565b6000819050919050565b6112af8161129c565b81146112ba57600080fd5b50565b6000813590506112cc816112a6565b92915050565b6000806000606084860312156112eb576112ea6111be565b5b60006112f98682870161120c565b935050602061130a8682870161120c565b925050604061131b868287016112bd565b9150509250925092565b60008115159050919050565b61133a81611325565b82525050565b60006020820190506113556000830184611331565b92915050565b6000819050919050565b600061138061137b611376846111c3565b61135b565b6111c3565b9050919050565b600061139282611365565b9050919050565b60006113a482611387565b9050919050565b6113b481611399565b82525050565b60006020820190506113cf60008301846113ab565b92915050565b6000602082840312156113eb576113ea6111be565b5b60006113f98482850161120c565b91505092915050565b61140b8161129c565b82525050565b60006020820190506114266000830184611402565b92915050565b611435816111e3565b82525050565b6000602082019050611450600083018461142c565b92915050565b60006020828403121561146c5761146b6111be565b5b600061147a848285016112bd565b91505092915050565b600061148e82611387565b9050919050565b61149e81611483565b82525050565b60006020820190506114b96000830184611495565b92915050565b6114c881611325565b81146114d357600080fd5b50565b6000813590506114e5816114bf565b92915050565b60008060408385031215611502576115016111be565b5b60006115108582860161120c565b9250506020611521858286016114d6565b9150509250929050565b600082825260208201905092915050565b7f436f6e747261637420696e7374616e63652068617320616c726561647920626560008201527f656e20696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000611598602e8361152b565b91506115a38261153c565b604082019050919050565b600060208201905081810360008301526115c78161158b565b9050919050565b7f43414c4c45525f4e4f545f494e43454e54495645535f434f4e54524f4c4c4552600082015250565b600061160460208361152b565b915061160f826115ce565b602082019050919050565b60006020820190508181036000830152611633816115f7565b9050919050565b600060408201905061164f600083018561142c565b61165c6020830184611402565b9392505050565b600081519050611672816114bf565b92915050565b60006020828403121561168e5761168d6111be565b5b600061169c84828501611663565b91505092915050565b60006060820190506116ba600083018661142c565b6116c7602083018561142c565b6116d46040830184611402565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006117168261129c565b91506117218361129c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611756576117556116dc565b5b828201905092915050565b7f6e6f742077686974656c69737465640000000000000000000000000000000000600082015250565b6000611797600f8361152b565b91506117a282611761565b602082019050919050565b600060208201905081810360008301526117c68161178a565b9050919050565b60006117d88261129c565b91506117e38361129c565b9250828210156117f6576117f56116dc565b5b828203905092915050565b7f6e6f20656d697373696f6e7320746f206e6f7469667900000000000000000000600082015250565b600061183760168361152b565b915061184282611801565b602082019050919050565b600060208201905081810360008301526118668161182a565b9050919050565b7f746f6f20736f6f6e20746f206e6f746966790000000000000000000000000000600082015250565b60006118a360128361152b565b91506118ae8261186d565b602082019050919050565b600060208201905081810360008301526118d281611896565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006119138261129c565b915061191e8361129c565b92508261192e5761192d6118d9565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006affffffffffffffffffffff82169050919050565b6119e3816119c3565b82525050565b6119f28161129c565b82525050565b600063ffffffff82169050919050565b611a11816119f8565b82525050565b611a20816111e3565b82525050565b6000611a3182611387565b9050919050565b611a4181611a26565b82525050565b6000611a5282611387565b9050919050565b611a6281611a47565b82525050565b60e082016000820151611a7e60008501826119da565b506020820151611a9160208501826119e9565b506040820151611aa46040850182611a08565b506060820151611ab76060850182611a17565b506080820151611aca6080850182611a17565b5060a0820151611add60a0850182611a38565b5060c0820151611af060c0850182611a59565b50505050565b6000611b028383611a68565b60e08301905092915050565b6000602082019050919050565b6000611b2682611997565b611b3081856119a2565b9350611b3b836119b3565b8060005b83811015611b6c578151611b538882611af6565b9750611b5e83611b0e565b925050600181019050611b3f565b5085935050505092915050565b60006020820190508181036000830152611b938184611b1b565b905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611bf760268361152b565b9150611c0282611b9b565b604082019050919050565b60006020820190508181036000830152611c2681611bea565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611c6360208361152b565b9150611c6e82611c2d565b602082019050919050565b60006020820190508181036000830152611c9281611c56565b905091905056fea26469706673582212200aefb85ba0edd6ab66e928304a276b0536fcda2c1e5b4b96da5a3810ca4c198f64736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c80637dc0d1d0116100ad578063d8d496ed11610071578063d8d496ed146102e4578063d936547e14610314578063e307c95214610344578063f2fde38b14610362578063f59c37081461037e57610121565b80637dc0d1d0146102525780638885711a146102705780638d8e5da71461028c5780638da5cb5b146102a8578063c6255443146102c657610121565b80635b9fe37f116100f45780635b9fe37f146101c057806362278463146101de578063715018a61461020e57806375d26413146102185780637c3702b11461023657610121565b80631459457a1461012657806316beb9821461014257806326837eda146101725780632f1f138b14610190575b600080fd5b610140600480360381019061013b9190611221565b61039a565b005b61015c600480360381019061015791906112d2565b6105ec565b6040516101699190611340565b60405180910390f35b61017a610705565b60405161018791906113ba565b60405180910390f35b6101aa60048036038101906101a591906113d5565b61072b565b6040516101b79190611411565b60405180910390f35b6101c8610743565b6040516101d5919061143b565b60405180910390f35b6101f860048036038101906101f391906113d5565b610769565b6040516102059190611411565b60405180910390f35b610216610781565b005b610220610795565b60405161022d919061143b565b60405180910390f35b610250600480360381019061024b9190611456565b6107bf565b005b61025a6108bb565b604051610267919061143b565b60405180910390f35b61028a600480360381019061028591906113d5565b6108e1565b005b6102a660048036038101906102a191906112d2565b610d33565b005b6102b0610e3b565b6040516102bd919061143b565b60405180910390f35b6102ce610e65565b6040516102db919061143b565b60405180910390f35b6102fe60048036038101906102f991906113d5565b610e74565b60405161030b9190611411565b60405180910390f35b61032e600480360381019061032991906113d5565b610e8c565b60405161033b9190611340565b60405180910390f35b61034c610eac565b60405161035991906114a4565b60405180910390f35b61037c600480360381019061037791906113d5565b610ed2565b005b610398600480360381019061039391906114eb565b610f56565b005b600060019054906101000a900460ff16806103b957506103b8610fb9565b5b806103cf575060008054906101000a900460ff16155b61040e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610405906115ae565b60405180910390fd5b60008060019054906101000a900460ff16159050801561045e576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b84603660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082603560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081603460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001603a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555083603b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506105c386610fca565b80156105e45760008060016101000a81548160ff0219169083151502179055505b505050505050565b60003373ffffffffffffffffffffffffffffffffffffffff16603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461067e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106759061161a565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85846040518363ffffffff1660e01b81526004016106b992919061163a565b6020604051808303816000875af11580156106d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fc9190611678565b90509392505050565b603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60396020528060005260406000206000915090505481565b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60386020528060005260406000206000915090505481565b610789611090565b6107936000610fca565b565b6000603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161081e939291906116a5565b6020604051808303816000875af115801561083d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108619190611678565b5080603760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108b1919061170b565b9250508190555050565b603b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661096d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610964906117ad565b60405180910390fd5b6000603760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000603860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008183610a0391906117cd565b905060008111610a48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3f9061184d565b60405180910390fd5b4262015180603960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a9791906117cd565b1015610ad8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610acf906118b9565b60405180910390fd5b60006201518082610ae99190611908565b905060006040518060e00160405280836affffffffffffffffffffff168152602001600081526020016201518042610b21919061170b565b63ffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff168152602001603b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525090506000600167ffffffffffffffff811115610bfd57610bfc611939565b5b604051908082528060200260200182016040528015610c3657816020015b610c23611116565b815260200190600190039081610c1b5790505b5090508181600081518110610c4e57610c4d611968565b5b6020026020010181905250603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663955c2ad7826040518263ffffffff1660e01b8152600401610cb49190611b79565b600060405180830381600087803b158015610cce57600080fd5b505af1158015610ce2573d6000803e3d6000fd5b5050505042603960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505050505050565b610d3b611090565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401610d7692919061163a565b6020604051808303816000875af1158015610d95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db99190611678565b508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f7dc4ea712e6400e67a5abca1a983e5c420c386c19936dc120cd860b50b8e257984604051610e2e9190611411565b60405180910390a4505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610e6f610e3b565b905090565b60376020528060005260406000206000915090505481565b603a6020528060005260406000206000915054906101000a900460ff1681565b603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610eda611090565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4190611c0d565b60405180910390fd5b610f5381610fca565b50565b610f5e611090565b80603a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600080303b90506000811491505090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61109861110e565b73ffffffffffffffffffffffffffffffffffffffff166110b6610e3b565b73ffffffffffffffffffffffffffffffffffffffff161461110c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110390611c79565b60405180910390fd5b565b600033905090565b6040518060e0016040528060006affffffffffffffffffffff16815260200160008152602001600063ffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111ee826111c3565b9050919050565b6111fe816111e3565b811461120957600080fd5b50565b60008135905061121b816111f5565b92915050565b600080600080600060a0868803121561123d5761123c6111be565b5b600061124b8882890161120c565b955050602061125c8882890161120c565b945050604061126d8882890161120c565b935050606061127e8882890161120c565b925050608061128f8882890161120c565b9150509295509295909350565b6000819050919050565b6112af8161129c565b81146112ba57600080fd5b50565b6000813590506112cc816112a6565b92915050565b6000806000606084860312156112eb576112ea6111be565b5b60006112f98682870161120c565b935050602061130a8682870161120c565b925050604061131b868287016112bd565b9150509250925092565b60008115159050919050565b61133a81611325565b82525050565b60006020820190506113556000830184611331565b92915050565b6000819050919050565b600061138061137b611376846111c3565b61135b565b6111c3565b9050919050565b600061139282611365565b9050919050565b60006113a482611387565b9050919050565b6113b481611399565b82525050565b60006020820190506113cf60008301846113ab565b92915050565b6000602082840312156113eb576113ea6111be565b5b60006113f98482850161120c565b91505092915050565b61140b8161129c565b82525050565b60006020820190506114266000830184611402565b92915050565b611435816111e3565b82525050565b6000602082019050611450600083018461142c565b92915050565b60006020828403121561146c5761146b6111be565b5b600061147a848285016112bd565b91505092915050565b600061148e82611387565b9050919050565b61149e81611483565b82525050565b60006020820190506114b96000830184611495565b92915050565b6114c881611325565b81146114d357600080fd5b50565b6000813590506114e5816114bf565b92915050565b60008060408385031215611502576115016111be565b5b60006115108582860161120c565b9250506020611521858286016114d6565b9150509250929050565b600082825260208201905092915050565b7f436f6e747261637420696e7374616e63652068617320616c726561647920626560008201527f656e20696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000611598602e8361152b565b91506115a38261153c565b604082019050919050565b600060208201905081810360008301526115c78161158b565b9050919050565b7f43414c4c45525f4e4f545f494e43454e54495645535f434f4e54524f4c4c4552600082015250565b600061160460208361152b565b915061160f826115ce565b602082019050919050565b60006020820190508181036000830152611633816115f7565b9050919050565b600060408201905061164f600083018561142c565b61165c6020830184611402565b9392505050565b600081519050611672816114bf565b92915050565b60006020828403121561168e5761168d6111be565b5b600061169c84828501611663565b91505092915050565b60006060820190506116ba600083018661142c565b6116c7602083018561142c565b6116d46040830184611402565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006117168261129c565b91506117218361129c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611756576117556116dc565b5b828201905092915050565b7f6e6f742077686974656c69737465640000000000000000000000000000000000600082015250565b6000611797600f8361152b565b91506117a282611761565b602082019050919050565b600060208201905081810360008301526117c68161178a565b9050919050565b60006117d88261129c565b91506117e38361129c565b9250828210156117f6576117f56116dc565b5b828203905092915050565b7f6e6f20656d697373696f6e7320746f206e6f7469667900000000000000000000600082015250565b600061183760168361152b565b915061184282611801565b602082019050919050565b600060208201905081810360008301526118668161182a565b9050919050565b7f746f6f20736f6f6e20746f206e6f746966790000000000000000000000000000600082015250565b60006118a360128361152b565b91506118ae8261186d565b602082019050919050565b600060208201905081810360008301526118d281611896565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006119138261129c565b915061191e8361129c565b92508261192e5761192d6118d9565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006affffffffffffffffffffff82169050919050565b6119e3816119c3565b82525050565b6119f28161129c565b82525050565b600063ffffffff82169050919050565b611a11816119f8565b82525050565b611a20816111e3565b82525050565b6000611a3182611387565b9050919050565b611a4181611a26565b82525050565b6000611a5282611387565b9050919050565b611a6281611a47565b82525050565b60e082016000820151611a7e60008501826119da565b506020820151611a9160208501826119e9565b506040820151611aa46040850182611a08565b506060820151611ab76060850182611a17565b506080820151611aca6080850182611a17565b5060a0820151611add60a0850182611a38565b5060c0820151611af060c0850182611a59565b50505050565b6000611b028383611a68565b60e08301905092915050565b6000602082019050919050565b6000611b2682611997565b611b3081856119a2565b9350611b3b836119b3565b8060005b83811015611b6c578151611b538882611af6565b9750611b5e83611b0e565b925050600181019050611b3f565b5085935050505092915050565b60006020820190508181036000830152611b938184611b1b565b905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611bf760268361152b565b9150611c0282611b9b565b604082019050919050565b60006020820190508181036000830152611c2681611bea565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611c6360208361152b565b9150611c6e82611c2d565b602082019050919050565b60006020820190508181036000830152611c9281611c56565b905091905056fea26469706673582212200aefb85ba0edd6ab66e928304a276b0536fcda2c1e5b4b96da5a3810ca4c198f64736f6c634300080c0033",
  "devdoc": {
    "details": "NOTE That ATokenAerodrome should not be made borrowable",
    "kind": "dev",
    "methods": {
      "emergencyWithdrawal(address,address,uint256)": {
        "details": "Perform an emergency token withdrawal only callable by the Rewards admin",
        "params": {
          "amount": "Amount of the withdrawal",
          "to": "Address of the recipient of the withdrawal",
          "token": "Address of the token to withdraw funds from this contract"
        }
      },
      "getIncentivesController()": {
        "returns": {
          "_0": "Returns the address of the Incentives Controller"
        }
      },
      "getRewardsAdmin()": {
        "returns": {
          "_0": "Returns the address of the Rewards admin"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "performTransfer(address,address,uint256)": {
        "details": "Perform custom transfer logic via delegate call from source contract to a TransferStrategy implementation",
        "params": {
          "amount": "Amount to transfer to the \"to\" address parameter",
          "reward": "Address of the reward token",
          "to": "Account to transfer rewards"
        },
        "returns": {
          "_0": "Returns true bool if transfer logic succeeds"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 738,
        "contract": "contracts/aerodrome/AeroEmissionsStrategy.sol:AeroEmissionsStrategy",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 741,
        "contract": "contracts/aerodrome/AeroEmissionsStrategy.sol:AeroEmissionsStrategy",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 799,
        "contract": "contracts/aerodrome/AeroEmissionsStrategy.sol:AeroEmissionsStrategy",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/aerodrome/AeroEmissionsStrategy.sol:AeroEmissionsStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 5711,
        "contract": "contracts/aerodrome/AeroEmissionsStrategy.sol:AeroEmissionsStrategy",
        "label": "incentiveController",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 5714,
        "contract": "contracts/aerodrome/AeroEmissionsStrategy.sol:AeroEmissionsStrategy",
        "label": "emissionManager",
        "offset": 0,
        "slot": "53",
        "type": "t_contract(IEmissionManager)4861"
      },
      {
        "astId": 5717,
        "contract": "contracts/aerodrome/AeroEmissionsStrategy.sol:AeroEmissionsStrategy",
        "label": "aero",
        "offset": 0,
        "slot": "54",
        "type": "t_contract(IERC20)317"
      },
      {
        "astId": 5721,
        "contract": "contracts/aerodrome/AeroEmissionsStrategy.sol:AeroEmissionsStrategy",
        "label": "emissionsReceived",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5725,
        "contract": "contracts/aerodrome/AeroEmissionsStrategy.sol:AeroEmissionsStrategy",
        "label": "emissionsNotified",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5729,
        "contract": "contracts/aerodrome/AeroEmissionsStrategy.sol:AeroEmissionsStrategy",
        "label": "lastNotified",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5733,
        "contract": "contracts/aerodrome/AeroEmissionsStrategy.sol:AeroEmissionsStrategy",
        "label": "whitelisted",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5735,
        "contract": "contracts/aerodrome/AeroEmissionsStrategy.sol:AeroEmissionsStrategy",
        "label": "oracle",
        "offset": 0,
        "slot": "59",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)317": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IEmissionManager)4861": {
        "encoding": "inplace",
        "label": "contract IEmissionManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}